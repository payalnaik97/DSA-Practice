package com.dsa.practice;

import java.util.NoSuchElementException;

public class CircularSingleLinkedList {
	private  ListNode last;
	private int length;
	
	public static class ListNode
	{
		private int data;
		private ListNode next;
		public ListNode(int data)
		{
			this.data=data;
		}
	}
  
	public CircularSingleLinkedList()
	{
		last=null;
		length=0;
	}
	public int length()
	{
		return length;
	}
	public boolean isEmpty()
	{
		return length==0;
	}
	
	public void createCircularSinglyLinkedList()
	{
		ListNode first=new ListNode(10);
		ListNode second=new ListNode(20);
		ListNode third=new ListNode(30);
		ListNode fourth=new ListNode(40);
		first.next=second;
		second.next=third;
		third.next=fourth;
		fourth.next=first;
		last=fourth;		
	}	
	
	public void displayList()
	{	  
	   if(last==null)
	   { 
		  System.out.println("List is Empty");
		  return; 
	   }
	   ListNode first=last.next;
	   while(first!=last) {
		 System.out.print(first.data+"-->");  
		 first=first.next;
	   }
	   
	   System.out.print(first.data); //last.data
	}
	
	public void insertNodeAtStart(int nodeValue)
	{
		ListNode newNode=new ListNode(nodeValue);
		if(last==null)
		    last=newNode;
		else
		   newNode.next=last.next;
		
		last.next=newNode;
		length++;
	}
	
	public void insertNodeAtEnd(int nodeValue)
	{
		ListNode newNode=new ListNode(nodeValue);
		if(last==null)  //or you can call --isEmpty()
		{
		    last=newNode;
		    last.next=last;
		}
		else
		{
		   newNode.next= last.next;		
		   last.next=newNode;
		   last=newNode;
		}
		length++;
	}
	
	public ListNode removeFirstNode() 
	{
		if(last==null) {
			System.out.println("List is empty");
			throw new NoSuchElementException();
		}
		ListNode temp=last.next;
		if(last.next==last) {
			last=null;
		}
		else
		{
			last.next=temp.next;
		}
		temp.next=null;
		length--;
		return temp;  //return deleted node
		
	}
	
	public static void main(String[] args) throws Exception {
		try {
		CircularSingleLinkedList csll=new CircularSingleLinkedList();
		System.out.println("Circular Linked List");
		csll.createCircularSinglyLinkedList();
		csll.displayList();
		
		//to insert node at start
		csll.insertNodeAtStart(9);	
		csll.insertNodeAtStart(8);
		System.out.println("\n");
		System.out.println("After insertion of node at start");
		csll.displayList();
		
		//to insert node at end
		csll.insertNodeAtEnd(50);	
     	csll.insertNodeAtEnd(60);
		System.out.println("\n");
		System.out.println("After insertion of node at end");
		csll.displayList();
		
		//to remove first node
		System.out.println("\n");
		System.out.println("\nDeleted Node is "+csll.removeFirstNode().data);
		System.out.println("After deletion of node from start");
		csll.displayList();
			
		}
		

		catch(Exception e){
			System.out.println(e);
			System.out.println("**********************You have passed incorrect information***********************");
		}
	}

}


